
#predicting e-commerce 

#This analysis and visualization will give you a detailed understanding of the e-commerce data
helping in identifying trends, outliers, and patterns crucial for predictive modeling. 


#------------------------------------------------------

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

import warnings
warnings.filterwarnings('ignore')

plt.style.use('fivethirtyeight')

df = pd.read_csv("E:\zmzzon\OnlineRetail.csv", encoding="latin", dtype={'CustomerID': str})

# عرض أول 5 صفوف من البيانات
print(df.head())
print("******************")
# عرض معلومات عن البيانات
print(df.info())
print("******************")
# وصف البيانات الإحصائي
print(df.describe())
print("******************")
# التعرف على القيم المفقودة
print(df.isnull().sum())
print("******************")
# تنظيف البيانات
print(df.dropna(inplace=True))
print("******************")
# أو ملء القيم المفقودة بالقيمة المتوسطة للعمود
#print(df['InvoiceDate'].fillna(df['InvoiceDate'].mean(), inplace=True))

# print("******************")

# تحويل أنواع البيانات

df['InvoiceDate'] = pd.to_datetime(df['InvoiceDate'])
df = df.set_index('InvoiceDate')
print(df.head())
print("******************")

print(df.isnull().sum())

print("******************")
df = df.drop(columns=['CustomerID'])
print(df[df['Description'].isnull()].head())

print("******************")

df['Description'] = df['Description'].fillna('UNKNOWN ITEM')
print(df.isnull().sum())

print("******************")

print(df['Description'].value_counts().head())

print("*****************************")

# Which items were bought more often?
item_counts = df['Description'].value_counts().sort_values(ascending=False).iloc[0:15]
plt.figure(figsize=(18,6))
sns.barplot(x=item_counts.index, y=item_counts.values, palette=sns.cubehelix_palette(15))
plt.ylabel("Counts")
plt.title("Which items were bought more often?")
plt.xticks(rotation=90)
plt.show()

print(df['Description'].value_counts().tail())
print("******")
print(df[~df['Description'].str.isupper()]['Description'].value_counts().head())
print("*******************")
# Not full upper case items
lcase_counts = df[~df['Description'].str.isupper()]['Description'].value_counts().sort_values(ascending=False).iloc[0:15]
plt.figure(figsize=(18,6))
sns.barplot(x=lcase_counts.index, y=lcase_counts.values, palette=sns.color_palette("hls", 15))
plt.ylabel("Counts")
plt.title("Not full upper case items")
plt.xticks(rotation=90)
plt.show()

print("*******************")

print(df['StockCode'].value_counts().head())

# Which stock codes were used the most?
stock_counts = df['StockCode'].value_counts().sort_values(ascending=False).iloc[0:15]
plt.figure(figsize=(18,6))
sns.barplot(x=stock_counts.index, y=stock_counts.values, palette=sns.color_palette("GnBu_d"))
plt.ylabel("Counts")
plt.title("Which stock codes were used the most?")
plt.xticks(rotation=90)
plt.show()

print(df['InvoiceNo'].value_counts().tail())

#  Which invoices had the most items?
inv_counts = df['InvoiceNo'].value_counts().sort_values(ascending=False).iloc[0:15]
plt.figure(figsize=(18,6))
sns.barplot(x=inv_counts.index, y=inv_counts.values, palette=sns.color_palette("BuGn_d"))
plt.ylabel("Counts")
plt.title("Which invoices had the most items?")
plt.xticks(rotation=90)
plt.show()

print(df[df['InvoiceNo'].str.startswith('C')].describe())

df = df[~df['InvoiceNo'].str.startswith('C')]
print(df.describe())

print(df[df['Quantity'] < 0].head())

df = df[df['Quantity'] > 0]
print(df.describe())

print(df[df['UnitPrice'] < 0].describe())

print(df[df['UnitPrice'] == -11062.06])

df = df[df['UnitPrice'] > 0]
print(df.describe())

plt.figure(figsize=(2,5))
sns.countplot(x=df[df['Country'] == 'United Kingdom']['Country'])
plt.xticks(rotation=90)
plt.show()

plt.figure(figsize=(18,6))
sns.countplot(x=df[df['Country'] != 'United Kingdom']['Country'])
plt.xticks(rotation=90)
plt.show()

uk_count = df[df['Country'] == 'United Kingdom']['Country'].count()
all_count = df['Country'].count()
uk_perc = uk_count/all_count
print(str('{0:.2f}%').format(uk_perc*100))

plt.figure(figsize=(18,6))
plt.scatter(x=df.index, y=df['UnitPrice'])
plt.show()

df = df[df['UnitPrice'] < 25000]
plt.figure(figsize=(18,6))
plt.scatter(x=df.index, y=df['UnitPrice'])
plt.xticks(rotation=90)
plt.show()

df_quantile = df[df['UnitPrice'] < 125]
plt.scatter(x=df_quantile.index, y=df_quantile['UnitPrice'])
plt.xticks(rotation=90)


